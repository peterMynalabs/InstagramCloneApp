//
//  EditProfileItemPresenter.swift
//  PortfolioSocial
//
//  Created by Peter Shaburov on 26.01.2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import Foundation

protocol EditProfileItemDelegate: AnyObject {
    func recieveNewData(updatedUserInformation: UserInformation)
}

final class EditProfileItemPresenter {

    // MARK: - Private properties -

    private unowned let view: EditProfileItemViewInterface
    private let interactor: EditProfileItemInteractorInterface
    private let wireframe: EditProfileItemWireframeInterface
    var delegate: EditProfileItemDelegate?
    
    var userInformation: UserInformation?
    var currentCase: FormItems?

    // MARK: - Lifecycle -

    init(view: EditProfileItemViewInterface, interactor: EditProfileItemInteractorInterface, wireframe: EditProfileItemWireframeInterface) {
        self.view = view
        self.interactor = interactor
        self.wireframe = wireframe
    }
}

// MARK: - Extensions -

extension EditProfileItemPresenter: EditProfileItemPresenterInterface {
    func determineLayout() {
            switch currentCase {
            case .name:
                view.setCurrentInformation(labelText: currentCase!.rawValue, information: userInformation?.name ?? "none")
            case .username:
                view.setCurrentInformation(labelText: currentCase!.rawValue, information: userInformation?.username ?? "none")
            case .occupation:
                view.setCurrentInformation(labelText: currentCase!.rawValue, information: userInformation?.occupation ?? "none")
            case .bio:
                view.setCurrentInformation(labelText: currentCase!.rawValue, information: userInformation?.bio ?? "none")
            case .nothing:
                fatalError()
            case .none:
                fatalError()
            }
        
    }
    func pressedDone(with text: String){
        switch currentCase {
        case .username:
            userInformation?.username = text
        case .bio:
            userInformation?.bio = text
        case .occupation:
            userInformation?.occupation = text
        case .name:
            userInformation?.name = text
        case .nothing:
            fatalError()
        case .none:
            fatalError()
        }
        
        delegate?.recieveNewData(updatedUserInformation: userInformation!)
        wireframe.viewDisappeared()
    }

    func pressedCancel() {
        wireframe.viewDisappeared()
    }

}
