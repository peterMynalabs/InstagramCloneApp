//
//  HomeFeedViewController.swift
//  PortfolioSocial
//
//  Created by Peter Shaburov on 07.01.2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import UIKit

class HomeFeedViewController: UIViewController {

    // MARK: - Public properties -

    var presenter: HomeFeedPresenterInterface!
    var tableView = PostTableView()
    var refreshControl = UIRefreshControl()

    // MARK: - Lifecycle -

    override func viewDidLoad() {
        super.viewDidLoad()
        self.title = "Home"
        setupTableView()
        setupRefreshControl()
        presenter.viewLoaded()
    }

    override func viewWillAppear(_ animated: Bool) {
        presenter.viewReloaded()
        navigationController?.navigationBar.isHidden = false
        tabBarController?.tabBar.isHidden = false
    }

    func setupRefreshControl() {
        refreshControl.addTarget(self, action: #selector(self.refresh(_:)), for: .valueChanged)
        tableView.addSubview(refreshControl)
    }

    func setupTableView() {
        tableView = PostTableView(frame: view.frame, style: .plain)
        tableView.tableViewDelegate = self
        tableView.showsVerticalScrollIndicator = false
        view.addSubview(tableView)
    }

    @objc func refresh(_ sender: AnyObject) {
        presenter.viewReloaded()
    }
}

// MARK: - Extensions -

extension HomeFeedViewController: HomeFeedViewInterface {
    func updateTimeline(with posts: [Post]) {
        tableView.updateWithPostsList(posts: posts)
        refreshControl.endRefreshing()
    }
}

extension HomeFeedViewController: PostTableViewDelegate {
    func clickedUsername(with username: String) {
        presenter.pressedUsernameButton(with: username)
    }
    func didTapLikeButton(_ likeButton: UIButton, on cell: PostTableCell) {
        guard let indexPath = tableView.indexPath(for: cell)
        else { return }

        likeButton.isUserInteractionEnabled = false

        guard let posts = presenter.posts else {
            return
        }
        let post = posts[indexPath.row]

        presenter.likedPost(isLiked: !post.isLiked, post: post, completion: { (success) in
            defer {
                likeButton.isUserInteractionEnabled = true
            }

            guard success else { return }

            post.likeCount += !post.isLiked ? 1 : -1
            post.isLiked = !post.isLiked

            guard let cell = self.tableView.cellForRow(at: indexPath) as? PostTableCell
            else { return }

            DispatchQueue.main.async {
                cell.liked = post.isLiked
                cell.likeCount = post.likeCount
            }
        })
    }
}
