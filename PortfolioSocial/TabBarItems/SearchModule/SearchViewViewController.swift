//
//  SearchViewViewController.swift
//  PortfolioSocial
//
//  Created by Peter Shaburov on 07.01.2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit

class SearchViewViewController: UITableViewController {

    // MARK: - Public properties -
    var presenter: SearchViewPresenterInterface!

    // MARK: - Lifecycle -

    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
        setupRefreshControl()
        setupTableView()
    }

    override func viewWillAppear(_ animated: Bool) {
        presenter.viewReloaded()
    }

    func setupRefreshControl() {
        refreshControl = UIRefreshControl()
        refreshControl?.addTarget(self, action: #selector(refresh(_:)), for: .valueChanged)
        tableView.addSubview(refreshControl!)
    }

    func setupView() {
        view.backgroundColor = UIColor(rgb: 0xFAFAFA)
        navigationItem.title = "Users"
    }

    func setupTableView() {
        tableView.frame = view.frame
        tableView.backgroundColor = UIColor(rgb: 0xFAFAFA)
        tableView.register(UsersTableViewCell.self, forCellReuseIdentifier: "UserTableViewCell")
        tableView.delegate = self
        tableView.dataSource = self
    }

    @objc func refresh(_ sender: AnyObject) {
        presenter.viewReloaded()
    }

    @objc func pressedFollowButton(sender: Any) {
        guard let button = sender as? FollowUnfollowButton else {
            return
        }
        if button.titleLabel?.text == "Following" {
            button.follow()
            presenter.clickedUser(with: button.uuid, isFollowing: true)
        } else {
            button.unfollow()
            presenter.clickedUser(with: button.uuid, isFollowing: false)
        }
    }

    override func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return view.frame.width / 5
    }

    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return presenter.info?.count ?? 9
    }

    override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        if let info = presenter.info {
            presenter.clickedUserName(with: info[indexPath.row].uid)
        }
    }

    override func tableView(_ tableView: UITableView,
                            cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let myCell = tableView.dequeueReusableCell(withIdentifier: UsersTableViewCell.identifier,
                                                   for: indexPath) as? UsersTableViewCell
        guard let cell = myCell else {
            return UITableViewCell()
        }
        cell.backgroundColor = UIColor(rgb: 0xFAFAFA)
        let shimmerView = UIView(frame: CGRect(x: 20, y: view.frame.width / 10 - 25, width: 50, height: 50))
        shimmerView.backgroundColor = UIColor(rgb: 0xEDEDED)
        shimmerView.layer.cornerRadius = 25

        if let info = presenter.info {
                presenter.cellLoaded(with: info[indexPath.row].uid, completion: { [weak self] (image, isFollowed) in
                    cell.addSubview(cell.newImageView)
                    cell.newImageView.backgroundColor = .clear
                    cell.newImageView.translatesAutoresizingMaskIntoConstraints = false
                    cell.newImageView.centerYAnchor.constraint(equalTo: cell.centerYAnchor).isActive = true
                    cell.newImageView.leftAnchor.constraint(equalTo: (self?.view.leftAnchor)!,
                                                            constant: 20).isActive = true
                    cell.newImageView.widthAnchor.constraint(equalToConstant: 50).isActive = true
                    cell.newImageView.heightAnchor.constraint(equalToConstant: 50).isActive = true

                    DispatchQueue.main.async {
                        cell.newImageView.sd_setImage(with: URL(string: image),
                                                      placeholderImage: UIImage(named: "defaultProfilePhoto"),
                                                      options: .highPriority,
                                                      completed: nil)
                    }

                    cell.newImageView.layer.cornerRadius = 25
                    cell.newImageView.layer.masksToBounds = true

                    if isFollowed {
                        cell.followUnfollowButton.unfollow()
                    } else {
                        cell.followUnfollowButton.follow()
                    }
                })

            cell.addSubview(cell.usernameLabel)
            cell.usernameLabel.text = info[indexPath.row].username
            cell.usernameLabel.font = UIFont.boldSystemFont(ofSize: 13)
            cell.usernameLabel.translatesAutoresizingMaskIntoConstraints = false
            cell.usernameLabel.centerYAnchor.constraint(equalTo: cell.centerYAnchor).isActive = true
            cell.usernameLabel.leftAnchor.constraint(equalTo: cell.leftAnchor, constant: 90).isActive = true
            cell.usernameLabel.widthAnchor.constraint(equalToConstant: 100).isActive = true
            cell.usernameLabel.heightAnchor.constraint(equalToConstant: 50).isActive = true

            cell.addSubview(cell.followUnfollowButton)

            cell.followUnfollowButton.uuid = info[indexPath.row].uid
            cell.followUnfollowButton.addTarget(self, action: #selector(pressedFollowButton(sender:)), for: .touchDown)
            cell.followUnfollowButton.translatesAutoresizingMaskIntoConstraints = false
            cell.followUnfollowButton.centerYAnchor.constraint(equalTo: cell.centerYAnchor).isActive = true
            cell.followUnfollowButton.leftAnchor.constraint(equalTo: cell.rightAnchor, constant: -120).isActive = true
            cell.followUnfollowButton.widthAnchor.constraint(equalToConstant: 100).isActive = true
            cell.followUnfollowButton.heightAnchor.constraint(equalToConstant: 35).isActive = true
            cell.followUnfollowButton.tag = indexPath.row
        }
        cell.backgroundViewForImage = shimmerView
        shimmerView.startShimmeringEffect()
        return cell
    }
}

// MARK: - Extensions -

extension SearchViewViewController: SearchViewViewInterface {
    func updateUsers(users: [User]) {
        tableView.reloadData()
        refreshControl!.endRefreshing()
    }
}
